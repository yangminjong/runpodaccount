# -*- coding: utf-8 -*-
"""완료1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13vOSKrg2HSQdxsnMnEmhtyiDRJ1VVLtZ
"""

from transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig
!pip install -q bitsandbytes accelerate peft transformers

import torch

import torch
print(f"torch version: {torch.__version__}")
import bitsandbytes
print(f"bitsandbytes version: {bitsandbytes.__version__}")
import bitsandbytes as bnb
from bitsandbytes.nn import Linear4bit

!pip install --upgrade bitsandbytes
!pip install --upgrade transformers accelerate

# Hugging Face 로그인
from huggingface_hub import login
from getpass import getpass

# 토큰 입력 (비밀번호처럼 입력됨)
hf_token = getpass('Hugging Face 토큰을 입력하세요: ')
login(token=hf_token)

from huggingface_hub import hf_hub_download
import torch

# weights_only=False 추가 (본인이 저장한 파일이니 안전)
model = torch.load(
    hf_hub_download(
        repo_id="thegreatgame/exaone-accounting-complete",
        filename="model_complete.pt",
        token=hf_token
    ),
    map_location="cuda",
    weights_only=False  # 이 줄 추가!
)

# 아래는 작업을 설명하는 지시사항과 추가 맥락을 제공하는 입력이 쌍으로 구성되어 있습니다.
# 요청을 적절히 완료하는 응답을 작성하세요.
# 답변하기 전에 질문을 신중히 생각하고 논리적이고 정확한 응답을 보장하기 위한 단계별 사고 과정을 만드세요.

question = "회사명: 케이이노텍, 장표구분: 매입매출전표, 거래일자: 2022/01/03, 거래처: sk브로드밴드, 거래구분: 매입, 거래유형: 과세, 금액: 33,680원, 부가세: 3,368원, 합계: 37,048원, 결제방법: 외상, 적요: 1월 데이터요금, 거래범주: nan, 비고: 에스케이브로드밴드(주)대구 국세청 승인번호[2022010350000066s1424125]"


prompt_style = """아래 지시문과 입력이 주어져 있다.
주어진 작업을 올바르게 수행하는 응답을 작성해라.
답변하기 전에 질문을 신중히 검토하고, 논리적 · 정확한 응답을 위해 단계별 Chain-of-Thought를 먼저 작성하라.

### Instruction:
너는 회계 전문가다. 제공된 거래 정보를 분석해 차변·대변을 정확히 분개하라.

### Question:
{}

### Response:
<think>{}"""

prompt_no_cot = """아래 지시문과 입력이 주어져 있다.
주어진 작업을 올바르게 수행하는 응답을 작성해라.

### Instruction:
너는 회계 전문가다. 제공된 거래 정보를 분석해 차변·대변을 정확히 분개하라.

### Question:
{}

### Response:
"""

# 토크나이저도 필요하면
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained(
    "LGAI-EXAONE/EXAONE-4.0-32B",
    trust_remote_code=True
)

import bitsandbytes as bnb
if not hasattr(bnb.nn.Linear4bit, "ipex_linear_is_set"):
    bnb.nn.Linear4bit.ipex_linear_is_set = False

model.eval()  # 추론 모드로 설정
inputs = tokenizer(prompt_style.format(question, ""), return_tensors="pt").to("cuda")

outputs = model.generate(
    input_ids=inputs.input_ids,
    attention_mask=inputs.attention_mask,
    max_new_tokens=1200,
    use_cache=True,
    pad_token_id=tokenizer.pad_token_id,  # 패딩 토큰 추가
    eos_token_id=tokenizer.eos_token_id   # EOS 토큰 추가
)
response = tokenizer.batch_decode(outputs, skip_special_tokens=True)
print(response[0].split("### Response:")[1])

print(response[0].split("### Response:"))

print(response[0].split("### Response:")[1])



# 아래는 작업을 설명하는 지시사항과 추가 맥락을 제공하는 입력이 쌍으로 구성되어 있습니다.
# 요청을 적절히 완료하는 응답을 작성하세요.
# 답변하기 전에 질문을 신중히 생각하고 논리적이고 정확한 응답을 보장하기 위한 단계별 사고 과정을 만드세요.

question2 = "회사명: 워터이지텍, 장표구분: 매입매출전표, 거래일자: 2022/04/08, 거래처: (주)건구종합건설, 거래구분: 환입, 거래유형: 과세, 금액: -660,000원, 부가세: -66,000원, 합계: -726,000원, 결제방법: 예금, 적요: 22-38번 계약 부분취소(차액환급), 거래범주: nan, 비고: nan"


prompt_style = """아래 지시문과 입력이 주어져 있다.
주어진 작업을 올바르게 수행하는 응답을 작성해라.
답변하기 전에 질문을 신중히 검토하고, 논리적 · 정확한 응답을 위해 단계별 Chain-of-Thought를 먼저 작성하라.

### Instruction:
너는 회계 전문가다. 제공된 거래 정보를 분석해 차변·대변을 정확히 분개하라.

### Question:
{}

### Response:
<think>{}"""

prompt_no_cot = """아래 지시문과 입력이 주어져 있다.
주어진 작업을 올바르게 수행하는 응답을 작성해라.

### Instruction:
너는 회계 전문가다. 제공된 거래 정보를 분석해 차변·대변을 정확히 분개하라.

### Question:
{}

### Response:
"""

model.eval()  # 추론 모드로 설정
inputs = tokenizer(prompt_no_cot.format(question, ""), return_tensors="pt").to("cuda")

outputs = model.generate(
    input_ids=inputs.input_ids,
    attention_mask=inputs.attention_mask,
    max_new_tokens=1200,
    use_cache=True,
    pad_token_id=tokenizer.pad_token_id,  # 패딩 토큰 추가
    eos_token_id=tokenizer.eos_token_id   # EOS 토큰 추가
)
response = tokenizer.batch_decode(outputs, skip_special_tokens=True)
print(response[0].split("### Response:")[1])

